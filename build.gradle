plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.0'
    id 'org.jetbrains.kotlin.jvm'
}

group = 'codes.snowy'
version = '1.0'

repositories {
    mavenCentral()
    maven { url "https://maven.enginehub.org/repo/" }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    maven {
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
        name = "placeholderapi"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.20.2-R0.1-SNAPSHOT")
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"
    implementation("de.tr7zw:item-nbt-api:2.13.2")
    implementation 'org.apache.commons:commons-lang3:3.5'
    compileOnly("com.sk89q.worldedit:worldedit-bukkit:7.2.14")
    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.9")
    implementation 'org.yaml:snakeyaml:2.3'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.3"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly ("net.luckperms:api:5.4")
    compileOnly("me.clip:placeholderapi:2.11.5")
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

shadowJar {
    relocate 'co.aikar.commands', 'codes.snowy.dupejs.acf'
    relocate 'co.aikar.locales', 'codes.snowy.dupejs.locales'
    relocate("de.tr7zw.changeme.nbtapi", "codes.snowy.dupejs.nbtapi")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
kotlin {
    jvmToolchain(17)
}
